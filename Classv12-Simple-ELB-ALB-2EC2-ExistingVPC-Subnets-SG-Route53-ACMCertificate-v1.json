{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Sample Template ELBSample: Create a load balanced sample web site. The AMI is chosen based on the region in which the stack is run. This example creates 2 EC2 instances behind a load balancer with a simple health check. The instances may be created in one or more AZs. The web site is available on port 80, however, the instances can be configured to listen on any port (8888 by default). **WARNING** This template creates one or more Amazon EC2 instances and an Elastic Load Balancer.   You will be billed for the AWS resources used if you create a stack from this template.",
  "Parameters" : {
    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "WebServerPort" : {
      "Description" : "TCP/IP port of the web server",
      "Type" : "String",
      "Default" : "80"
    },

    "MyKeyName": {
      "Description": "Required- Name of an existing EC2 KeyPair to enable SSH access to the instances for Consul",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "KSClass-v11",
      "ConstraintDescription" : "must be the Key Name of an existing KeyPair ."
    },
    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

  "VPCID" : {
    "Type" : "String",
    "Description" : "Optional - VPC Id of existing VPC. Leave blank to have a new VPC created",
    "Default" : "vpc-0841319e6ce7b0aef",
    "ConstraintDescription" : "VPC ID must begin with 'vpc-' or leave blank to have a new VPC created"
  },
  "SubnetId1DMZA" : {
    "Type" : "String",
    "Description" : "Conditional- required if VpcId provided. Existing VPC Subnet Id 1 where EC2 instances will run",
    "Default" : "subnet-001edf2c916c39424",
    "ConstraintDescription" : "must be the Subnet Id of an existing Subnet ."
  },
  "SubnetId2DMZB" : {
    "Type" : "String",
    "Description" : "Conditional- required if VpcId provided. Existing VPC Subnet 2 Id where EC2 instances will run",
    "Default" : "subnet-09e513fa1c2953a6c",
    "ConstraintDescription" : "must be the Subnet Id of an existing Subnet ."
  },
  "SubnetId3DMZC" : {
    "Type" : "String",
    "Description" : "Conditional- required if VpcId provided. Existing VPC Subnet Id 3 where EC2 instances will run",
    "Default" : "subnet-0fbd918bb73f5daa5",
    "ConstraintDescription" : "must be the Subnet Id of an existing Subnet ."
  },

  "MainSecurityGroupIds1" : {
    "Type" : "String",
    "Description" : "Conditional- required if GENERIC security group provided. Existing GSecurity group Attaching",
    "Default" : "sg-0489e24fda4770506",
    "ConstraintDescription" : "must be the Security group Id of an existing SG ."
  },
  "Certificate1ARN" : {
      "Type" : "String",
      "Description" : "The ARN for the first certificate of *.ksgclass.co.in",
      "Default" : "arn:aws:acm:us-west-2:008369302018:certificate/b6adb0ee-d137-4f23-8e50-84b1d305447b",
      "ConstraintDescription" : "must be the ARN of an existing certificate KSClass certificates"
   },
   "DNSHostedZoneName": {
      "Description": "The route53 HostedZoneName. For example, \"mydomain.com.\"  Don't forget the period at the end.",
      "Type": "String",
      "Default" : "ksgclass.co.in",
      "ConstraintDescription" : "must be the exact one what you're going to use the hosted zone.Default is example "
     },
     "SubdomainRecord": {
        "Description": "The subdomain of the dns entry. For example, hello -> hello.mydomain.com, hello is the subdomain.",
        "Type": "String",
        "Default" : "cfnelb",
        "ConstraintDescription" : "Can be used the subdomain record name as gcoConsultest .Default one is the example "
     }
},

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t2.micro"    : { "Arch" : "64" },
      "m1.small"    : { "Arch" : "64" },
      "m1.medium"   : { "Arch" : "64" },
      "m1.large"    : { "Arch" : "64" },
      "m1.xlarge"   : { "Arch" : "64" },
      "m2.xlarge"   : { "Arch" : "64" },
      "m2.2xlarge"  : { "Arch" : "64" },
      "m3.xlarge"   : { "Arch" : "64" },
      "m3.2xlarge"  : { "Arch" : "64" },
      "m2.4xlarge"  : { "Arch" : "64" },
      "c1.medium"   : { "Arch" : "64" },
      "c1.xlarge"   : { "Arch" : "64" }
    },

    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "32" : "ami-aba768c2", "64" : "ami-81a768e8" },
      "us-west-1"      : { "32" : "ami-45822300", "64" : "ami-238ed2f4" },
      "us-west-2"      : { "64" : "ami-065d4c51ae9e6312d", "64" : "ami-065d4c51ae9e6312d" },
      "eu-west-1"      : { "32" : "ami-018bb975", "64" : "ami-998bb9ed" },
      "sa-east-1"      : { "32" : "ami-a039e6bd", "64" : "ami-a239e6bf" },
      "ap-southeast-1" : { "32" : "ami-425a2010", "64" : "ami-5e5a200c" },
      "ap-southeast-2" : { "32" : "ami-f98512c3", "64" : "ami-43851279" },
      "ap-northeast-1" : { "32" : "ami-7871c579", "64" : "ami-7671c577" }
    }
  },

  "Resources" : {
    "MyElasticLoadBalancerV2" : {
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties" : {
        "Subnets" : [{ "Ref" : "SubnetId1DMZA" }, { "Ref" : "SubnetId2DMZB" }, { "Ref" : "SubnetId3DMZC" }],
        "Scheme": "internet-facing",
        "SecurityGroups" :  [{ "Ref" : "MainSecurityGroupIds1" },{ "Ref" : "LoadBalancerSecurityGroup" } ]
      }
    },
    "LoadBalancerListener1": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [{
          "Type": "forward",
          "TargetGroupArn": { "Ref": "ALBTargetGroup1" }
        }],
        "LoadBalancerArn": { "Ref": "MyElasticLoadBalancerV2" },
            "Port": 443,
            "Protocol": "HTTPS",
            "Certificates" : [
              { "CertificateArn" :
                { "Ref" : "Certificate1ARN"
                }
              }
            ]
          }
    },

    "ALBTargetGroup1": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "ALBTargetGroup1" ] ] },
        "Port": 80,
        "Protocol": "HTTP",
        "UnhealthyThresholdCount" : 5,
        "HealthCheckIntervalSeconds" : 30,
        "HealthCheckTimeoutSeconds" : 5,
        "HealthyThresholdCount" : 3,
        "Targets": [
            {
                "Id": {
                    "Ref": "Ec2Instance1"
                },
                "Port": 80
            },
            {
                "Id": {
                    "Ref": "Ec2Instance2"
                },
                "Port": 80
            }
        ],
        "VpcId": { "Ref": "VPCID" }
      }
    },
    "LoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP and HTTPS access on port 8443,8444,8500 and 8600",
        "VpcId" : { "Ref" : "VPCID" },
        "SecurityGroupIngress" : [
                         { "IpProtocol" : "tcp", "FromPort" : "8500", "ToPort" : "8500", "SourceSecurityGroupId" : { "Ref" : "MainSecurityGroupIds1" } },
                         { "IpProtocol" : "tcp", "FromPort" : "8500", "ToPort" : "8500", "CidrIp" : "0.0.0.0/0" },
                         { "IpProtocol" : "tcp", "FromPort" : "8600", "ToPort" : "8600", "CidrIp" : "0.0.0.0/0" },
                         { "IpProtocol" : "tcp", "FromPort" : "8500", "ToPort" : "8500", "CidrIp" : "0.0.0.0/0" },
                         { "IpProtocol" : "tcp", "FromPort" : "8900", "ToPort" : "8900", "CidrIp" : "0.0.0.0/0" },
                         { "IpProtocol" : "tcp", "FromPort" : "8600", "ToPort" : "8600", "CidrIp" : "0.0.0.0/0" },
                         { "IpProtocol" : "tcp", "FromPort" : "8500", "ToPort" : "8500", "CidrIp" : "0.0.0.0/0" },
                         { "IpProtocol" : "tcp", "FromPort" : "8600", "ToPort" : "8600", "CidrIp" : "0.0.0.0/0" },
                         { "IpProtocol" : "tcp", "FromPort" : "8600", "ToPort" : "8600", "SourceSecurityGroupId" : { "Ref" : "MainSecurityGroupIds1" } },
                         { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0" },
                         { "IpProtocol" : "tcp", "FromPort" : "8443", "ToPort" : "8443", "CidrIp" : "0.0.0.0/0" },
                         { "IpProtocol" : "tcp", "FromPort" : "8443", "ToPort" : "8443", "SourceSecurityGroupId" : { "Ref" : "MainSecurityGroupIds1" } }
                       ],
        "SecurityGroupEgress" :  [
                        { "IpProtocol" : "tcp", "FromPort" : "1", "ToPort" : "65535", "CidrIp" : "0.0.0.0/0" }
                       ]
      }
    },

    "Ec2Instance1" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "SubnetId": { "Ref": "SubnetId1DMZA" },
        "SecurityGroupIds" : [ { "Ref" : "InstanceSecurityGroup" } ],
        "KeyName" : { "Ref" : "MyKeyName" },
        "InstanceType" : { "Ref" : "InstanceType" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" },
                                          "Arch" ] } ] },
        "UserData" : { "Fn::Base64" : { "Ref" : "WebServerPort" }}
      }
    },
    "Ec2Instance2" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "SubnetId": { "Ref": "SubnetId2DMZB" },
        "SecurityGroupIds" : [ { "Ref" : "InstanceSecurityGroup" } ],
        "KeyName" : { "Ref" : "MyKeyName" },
        "InstanceType" : { "Ref" : "InstanceType" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" },
                                          "Arch" ] } ] },
        "UserData" : { "Fn::Base64" : { "Ref" : "WebServerPort" }}
      }
    },

    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access and HTTP access on the inbound port",
        "VpcId" : { "Ref" : "VPCID" },
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : { "Ref" : "SSHLocation"}
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : { "Ref" : "WebServerPort" },
          "ToPort" : { "Ref" : "WebServerPort" },
          "CidrIp" : "0.0.0.0/0"
        } ]
      }
    },

    "Route53HostRecord": {
       "Type": "AWS::Route53::RecordSet",
       "Properties": {
          "HostedZoneName": {
             "Fn::Join": [
                "",
                [
                   {
                      "Ref": "DNSHostedZoneName"
                   },
                   "."
                ]
             ]
          },
          "Comment": "DNS name for my ELB.",
          "Name": {
             "Fn::Join": [
                "",
                [
                   {
                      "Ref": "SubdomainRecord"
                   },
                   ".",
                   {
                      "Ref": "DNSHostedZoneName"
                   },
                   "."
                ]
             ]
          },
          "Type": "CNAME",
          "TTL": "300",
          "ResourceRecords": [
             {
                "Fn::GetAtt": [
                   "MyElasticLoadBalancerV2",
                   "DNSName"
                ]
             }
          ]
       }
     }
  },

  "Outputs" : {
    "URL1" : {
      "Description" : "URL of the sample website",
      "Value" :  { "Fn::Join" : [ "", [ "https://", { "Fn::GetAtt" : [ "MyElasticLoadBalancerV2", "DNSName" ]}]]}
    },
    "InstanceId1": {
      "Description": "InstanceId1 of the newly created EC2 instance",
      "Value": {
        "Ref": "Ec2Instance1"
      }
    },
    "InstanceId2": {
      "Description": "InstanceId1 of the newly created EC2 instance",
      "Value": {
        "Ref": "Ec2Instance2"
      }
    },
    "AZ1": {
      "Description": "Availability Zone of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": ["Ec2Instance1", "AvailabilityZone"]
      }
    },
    "AZ2": {
      "Description": "Availability Zone of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": ["Ec2Instance2", "AvailabilityZone"]
      }
    },
    "Route53ProxyURL": {
      "Description": "Class Route53 Admin  URL with protocol SSL - 443",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https:\/\/",
            { "Ref": "Route53HostRecord" },
            ":443"
          ]
        ]
      }
    }

    }
  }
